"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// src/Item.tsx
const AnimatedText = _reactNativeReanimated.default.createAnimatedComponent(_reactNative.Text);

function Item(props) {
  const {
    index,
    itemHeight,
    offset,
    label,
    activeColor = '#1CAF8D',
    inactiveColor = 'rgba(0, 0, 0, 0.3)',
    labelStyle = {
      fontSize: 17
    }
  } = props;
  const itemOffset = index * itemHeight;
  const udv = (0, _reactNativeReanimated.useDerivedValue)(() => {
    if (offset.value >= (index - 3) * itemHeight && offset.value <= (index + 3) * itemHeight) {
      return offset.value;
    } else if (offset.value < (index - 3) * itemHeight) {
      return 0;
    } else if (offset.value > (index + 3) * itemHeight) {
      return 0;
    }

    return 0;
  });
  const animatedColorStyle = (0, _reactNativeReanimated.useAnimatedStyle)(() => {
    const color = (0, _reactNativeReanimated.interpolateColor)(udv.value, [itemOffset - itemHeight, itemOffset, itemOffset + itemHeight], [inactiveColor, activeColor, inactiveColor]);
    return {
      color
    };
  }, [itemHeight]);
  return /*#__PURE__*/_react.default.createElement(_reactNative.View // eslint-disable-next-line react-native/no-inline-styles
  , {
    style: {
      height: itemHeight,
      justifyContent: 'center',
      alignItems: 'center'
    }
  }, /*#__PURE__*/_react.default.createElement(AnimatedText, {
    style: [animatedColorStyle, labelStyle]
  }, label));
}

var _default = /*#__PURE__*/_react.default.memo(Item);

exports.default = _default;
//# sourceMappingURL=Item.js.map