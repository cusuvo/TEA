{"version":3,"sources":["Item.tsx"],"names":["AnimatedText","Animated","createAnimatedComponent","Text","Item","props","index","itemHeight","offset","label","activeColor","inactiveColor","labelStyle","fontSize","itemOffset","udv","value","animatedColorStyle","color","height","justifyContent","alignItems","React","memo"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;;;;;;;AAJA;AAUA,MAAMA,YAAY,GAAGC,+BAASC,uBAAT,CAAiCC,iBAAjC,CAArB;;AAYA,SAASC,IAAT,CAAcC,KAAd,EAAiC;AAC/B,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA,MAHI;AAIJC,IAAAA,KAJI;AAKJC,IAAAA,WAAW,GAAG,SALV;AAMJC,IAAAA,aAAa,GAAG,oBANZ;AAOJC,IAAAA,UAAU,GAAG;AACXC,MAAAA,QAAQ,EAAE;AADC;AAPT,MAUFR,KAVJ;AAWA,QAAMS,UAAU,GAAGR,KAAK,GAAGC,UAA3B;AAEA,QAAMQ,GAAG,GAAG,4CAAgB,MAAM;AAChC,QACEP,MAAM,CAACQ,KAAP,IAAgB,CAACV,KAAK,GAAG,CAAT,IAAcC,UAA9B,IACAC,MAAM,CAACQ,KAAP,IAAgB,CAACV,KAAK,GAAG,CAAT,IAAcC,UAFhC,EAGE;AACA,aAAOC,MAAM,CAACQ,KAAd;AACD,KALD,MAKO,IAAIR,MAAM,CAACQ,KAAP,GAAe,CAACV,KAAK,GAAG,CAAT,IAAcC,UAAjC,EAA6C;AAClD,aAAO,CAAP;AACD,KAFM,MAEA,IAAIC,MAAM,CAACQ,KAAP,GAAe,CAACV,KAAK,GAAG,CAAT,IAAcC,UAAjC,EAA6C;AAClD,aAAO,CAAP;AACD;;AAED,WAAO,CAAP;AACD,GAbW,CAAZ;AAeA,QAAMU,kBAAkB,GAAG,6CAAiB,MAAM;AAChD,UAAMC,KAAK,GAAG,6CACZH,GAAG,CAACC,KADQ,EAEZ,CAACF,UAAU,GAAGP,UAAd,EAA0BO,UAA1B,EAAsCA,UAAU,GAAGP,UAAnD,CAFY,EAGZ,CAACI,aAAD,EAAgBD,WAAhB,EAA6BC,aAA7B,CAHY,CAAd;AAKA,WAAO;AAAEO,MAAAA;AAAF,KAAP;AACD,GAP0B,EAOxB,CAACX,UAAD,CAPwB,CAA3B;AASA,sBACE,6BAAC,iBAAD,CACE;AADF;AAEE,IAAA,KAAK,EAAE;AACLY,MAAAA,MAAM,EAAEZ,UADH;AAELa,MAAAA,cAAc,EAAE,QAFX;AAGLC,MAAAA,UAAU,EAAE;AAHP;AAFT,kBAQE,6BAAC,YAAD;AAAc,IAAA,KAAK,EAAE,CAACJ,kBAAD,EAAqBL,UAArB;AAArB,KACGH,KADH,CARF,CADF;AAcD;;4BAEca,eAAMC,IAAN,CAAWnB,IAAX,C","sourcesContent":["// src/Item.tsx\n\nimport React from 'react';\nimport { View, Text, TextStyle } from 'react-native';\nimport Animated, {\n  interpolateColor,\n  useAnimatedStyle,\n  useDerivedValue,\n} from 'react-native-reanimated';\n\nconst AnimatedText = Animated.createAnimatedComponent(Text);\n\ninterface IItemProps {\n  index: number;\n  offset: Animated.SharedValue<number>;\n  itemHeight: number;\n  label: string;\n  activeColor?: string;\n  inactiveColor?: string;\n  labelStyle?: TextStyle;\n}\n\nfunction Item(props: IItemProps) {\n  const {\n    index,\n    itemHeight,\n    offset,\n    label,\n    activeColor = '#1CAF8D',\n    inactiveColor = 'rgba(0, 0, 0, 0.3)',\n    labelStyle = {\n      fontSize: 17,\n    },\n  } = props;\n  const itemOffset = index * itemHeight;\n\n  const udv = useDerivedValue(() => {\n    if (\n      offset.value >= (index - 3) * itemHeight &&\n      offset.value <= (index + 3) * itemHeight\n    ) {\n      return offset.value;\n    } else if (offset.value < (index - 3) * itemHeight) {\n      return 0;\n    } else if (offset.value > (index + 3) * itemHeight) {\n      return 0;\n    }\n\n    return 0;\n  });\n\n  const animatedColorStyle = useAnimatedStyle(() => {\n    const color = interpolateColor(\n      udv.value,\n      [itemOffset - itemHeight, itemOffset, itemOffset + itemHeight],\n      [inactiveColor, activeColor, inactiveColor]\n    );\n    return { color };\n  }, [itemHeight]);\n\n  return (\n    <View\n      // eslint-disable-next-line react-native/no-inline-styles\n      style={{\n        height: itemHeight,\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n    >\n      <AnimatedText style={[animatedColorStyle, labelStyle]}>\n        {label}\n      </AnimatedText>\n    </View>\n  );\n}\n\nexport default React.memo(Item);\n"]}