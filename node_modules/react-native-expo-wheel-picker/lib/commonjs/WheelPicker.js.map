{"version":3,"sources":["WheelPicker.tsx"],"names":["AnimatedFlatList","Animated","createAnimatedComponent","FlatList","width","Dimensions","get","WheelPicker","props","scrollView","offset","scrollHandler","e","value","contentOffset","y","items","propItems","numberOfVisibleRows","onChange","valueAttribute","labelAttribute","defaultIndex","height","currentIndex","onValueChange","initialValue","renderItem","item","index","itemHeight","label","snapToOffsets","Array","length","fill","map","_","separators","position","justifyContent","Styles","contentContainerStyle","alignItems","paddingVertical","onMomentumScrollEndAndroid","Platform","OS","setTimeout","scrollToOffset","animated","current","getNode","React","memo"],"mappings":"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","sourcesContent":["// src/WheelPicker.tsx\nimport React, { useCallback, useRef, useMemo, useEffect } from 'react';\nimport { View, FlatList, Dimensions, ViewStyle, Platform } from 'react-native';\nimport Animated, {\n  useSharedValue,\n  useAnimatedScrollHandler,\n} from 'react-native-reanimated';\nimport Item from './Item';\nimport usePresenter from './usePresenter';\nimport Styles from './index.style';\nimport isFunction from 'lodash/isFunction';\nimport { itemHeight } from './constant';\n\nconst AnimatedFlatList = Animated.createAnimatedComponent(FlatList);\n\nconst { width } = Dimensions.get('window');\n\ninterface IWheelPickerProps {\n  items: any[];\n  onChange: (index: number) => void;\n  numberOfVisibleRows?: number;\n  value: any;\n  labelAttribute?: string;\n  valueAttribute?: string;\n}\n\nfunction WheelPicker(props: IWheelPickerProps) {\n  const scrollView = useRef<Animated.ScrollView>();\n  const offset = useSharedValue(0);\n  const scrollHandler = useAnimatedScrollHandler((e) => {\n    offset.value = e.contentOffset.y;\n  });\n\n  const {\n    items: propItems,\n    numberOfVisibleRows = 5,\n    value,\n    onChange = () => {},\n    valueAttribute = 'value',\n    labelAttribute = 'name',\n  } = props;\n\n  const { items, defaultIndex, height, currentIndex, onValueChange } =\n    usePresenter({\n      initialValue: value,\n      items: propItems,\n      valueAttribute,\n      labelAttribute,\n      numberOfVisibleRows,\n    });\n\n  const renderItem = useCallback(\n    ({ item, index }) => (\n      <Item\n        index={index}\n        offset={offset}\n        itemHeight={itemHeight}\n        label={item.label}\n      />\n    ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  useEffect(() => {\n    if (currentIndex !== defaultIndex) onChange(currentIndex);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentIndex]);\n\n  const snapToOffsets = useMemo(\n    () =>\n      Array(items.length)\n        .fill(0)\n        .map((_, index) => index * 46),\n    [items]\n  );\n\n  const separators = useMemo(() => {\n    return (\n      <View\n        // eslint-disable-next-line react-native/no-inline-styles\n        style={{\n          position: 'absolute',\n          justifyContent: 'center',\n          width,\n          height,\n        }}\n        pointerEvents=\"none\"\n      >\n        <View style={Styles.separators} />\n      </View>\n    );\n  }, [height]);\n\n  const contentContainerStyle: ViewStyle = useMemo(\n    () => ({\n      width,\n      alignItems: 'center',\n      paddingVertical: height / 2 - itemHeight / 2,\n    }),\n    [height]\n  );\n\n  const onMomentumScrollEndAndroid = (index: number) => {\n    if (Platform.OS === 'android' && currentIndex !== index) {\n    }\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      // console.log(defaultIndex);\n      onMomentumScrollEndAndroid(defaultIndex);\n      scrollToOffset(defaultIndex, true);\n    }, 100);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [defaultIndex]);\n\n  const scrollToOffset = (index: number, animated: boolean) => {\n    if (isFunction((scrollView.current as any)?.scrollToOffset)) {\n      (scrollView.current as any)?.scrollToOffset({\n        offset: index * itemHeight,\n        animated,\n      });\n    } else {\n      (scrollView.current?.getNode() as any)?.scrollToOffset({\n        offset: index * itemHeight,\n        animated,\n      });\n    }\n  };\n\n  return (\n    <View style={{ height }}>\n      <AnimatedFlatList\n        // @ts-ignore\n        ref={scrollView}\n        height={height}\n        data={items}\n        showsVerticalScrollIndicator={false}\n        scrollEventThrottle={100}\n        initialNumToRender={numberOfVisibleRows}\n        onScroll={scrollHandler}\n        pagingEnabled\n        renderItem={renderItem}\n        snapToOffsets={snapToOffsets}\n        keyExtractor={(_, index) => `Item_${index}`}\n        contentContainerStyle={contentContainerStyle}\n        snapToInterval={itemHeight}\n        decelerationRate={0.99}\n        onMomentumScrollEnd={onValueChange}\n      />\n      {separators}\n    </View>\n  );\n}\n\nexport default React.memo(WheelPicker);\n"]}