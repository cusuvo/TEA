"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));

var _Item = _interopRequireDefault(require("./Item"));

var _usePresenter = _interopRequireDefault(require("./usePresenter"));

var _index = _interopRequireDefault(require("./index.style"));

var _isFunction = _interopRequireDefault(require("lodash/isFunction"));

var _constant = require("./constant");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// src/WheelPicker.tsx
const AnimatedFlatList = _reactNativeReanimated.default.createAnimatedComponent(_reactNative.FlatList);

const {
  width
} = _reactNative.Dimensions.get('window');

function WheelPicker(props) {
  const scrollView = (0, _react.useRef)();
  const offset = (0, _reactNativeReanimated.useSharedValue)(0);
  const scrollHandler = (0, _reactNativeReanimated.useAnimatedScrollHandler)(e => {
    offset.value = e.contentOffset.y;
  });
  const {
    items: propItems,
    numberOfVisibleRows = 5,
    value,
    onChange = () => {},
    valueAttribute = 'value',
    labelAttribute = 'name'
  } = props;
  const {
    items,
    defaultIndex,
    height,
    currentIndex,
    onValueChange
  } = (0, _usePresenter.default)({
    initialValue: value,
    items: propItems,
    valueAttribute,
    labelAttribute,
    numberOfVisibleRows
  });
  const renderItem = (0, _react.useCallback)(_ref => {
    let {
      item,
      index
    } = _ref;
    return /*#__PURE__*/_react.default.createElement(_Item.default, {
      index: index,
      offset: offset,
      itemHeight: _constant.itemHeight,
      label: item.label
    });
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  []);
  (0, _react.useEffect)(() => {
    if (currentIndex !== defaultIndex) onChange(currentIndex); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [currentIndex]);
  const snapToOffsets = (0, _react.useMemo)(() => Array(items.length).fill(0).map((_, index) => index * 46), [items]);
  const separators = (0, _react.useMemo)(() => {
    return /*#__PURE__*/_react.default.createElement(_reactNative.View // eslint-disable-next-line react-native/no-inline-styles
    , {
      style: {
        position: 'absolute',
        justifyContent: 'center',
        width,
        height
      },
      pointerEvents: "none"
    }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: _index.default.separators
    }));
  }, [height]);
  const contentContainerStyle = (0, _react.useMemo)(() => ({
    width,
    alignItems: 'center',
    paddingVertical: height / 2 - _constant.itemHeight / 2
  }), [height]);

  const onMomentumScrollEndAndroid = index => {
    if (_reactNative.Platform.OS === 'android' && currentIndex !== index) {}
  };

  (0, _react.useEffect)(() => {
    setTimeout(() => {
      // console.log(defaultIndex);
      onMomentumScrollEndAndroid(defaultIndex);
      scrollToOffset(defaultIndex, true);
    }, 100); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [defaultIndex]);

  const scrollToOffset = (index, animated) => {
    var _scrollView$current;

    if ((0, _isFunction.default)((_scrollView$current = scrollView.current) === null || _scrollView$current === void 0 ? void 0 : _scrollView$current.scrollToOffset)) {
      var _scrollView$current2;

      (_scrollView$current2 = scrollView.current) === null || _scrollView$current2 === void 0 ? void 0 : _scrollView$current2.scrollToOffset({
        offset: index * _constant.itemHeight,
        animated
      });
    } else {
      var _scrollView$current3, _scrollView$current3$;

      (_scrollView$current3 = scrollView.current) === null || _scrollView$current3 === void 0 ? void 0 : (_scrollView$current3$ = _scrollView$current3.getNode()) === null || _scrollView$current3$ === void 0 ? void 0 : _scrollView$current3$.scrollToOffset({
        offset: index * _constant.itemHeight,
        animated
      });
    }
  };

  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      height
    }
  }, /*#__PURE__*/_react.default.createElement(AnimatedFlatList // @ts-ignore
  , {
    ref: scrollView,
    height: height,
    data: items,
    showsVerticalScrollIndicator: false,
    scrollEventThrottle: 100,
    initialNumToRender: numberOfVisibleRows,
    onScroll: scrollHandler,
    pagingEnabled: true,
    renderItem: renderItem,
    snapToOffsets: snapToOffsets,
    keyExtractor: (_, index) => `Item_${index}`,
    contentContainerStyle: contentContainerStyle,
    snapToInterval: _constant.itemHeight,
    decelerationRate: 0.99,
    onMomentumScrollEnd: onValueChange
  }), separators);
}

var _default = /*#__PURE__*/_react.default.memo(WheelPicker);

exports.default = _default;
//# sourceMappingURL=WheelPicker.js.map