// src/usePresenter.ts
import { useCallback, useState } from 'react';
import findIndex from 'lodash/findIndex';
import isUndefined from 'lodash/isUndefined';
import { itemHeight } from './constant';
export default function usePresenter(_ref) {
  let {
    initialValue,
    items: propItems,
    valueAttribute,
    labelAttribute,
    numberOfVisibleRows
  } = _ref;
  const items = propItems.map(item => {
    return {
      value: item[valueAttribute],
      label: item[labelAttribute]
    };
  });
  const defaultIndex = isUndefined(initialValue) ? 0 : findIndex(items, {
    value: initialValue
  });
  const [currentIndex, setCurrentIndex] = useState(defaultIndex);
  const onValueChange = useCallback(event => {
    setCurrentIndex(Math.floor(event.nativeEvent.contentOffset.y / itemHeight));
  }, []);

  const getRowItemByIndex = index => {
    return items[index];
  };

  return {
    items,
    onValueChange,
    currentIndex,
    defaultIndex: defaultIndex > -1 ? defaultIndex : 0,
    getRowItemByIndex,
    height: numberOfVisibleRows * itemHeight
  };
}
//# sourceMappingURL=usePresenter.js.map