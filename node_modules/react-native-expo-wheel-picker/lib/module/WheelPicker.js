// src/WheelPicker.tsx
import React, { useCallback, useRef, useMemo, useEffect } from 'react';
import { View, FlatList, Dimensions, Platform } from 'react-native';
import Animated, { useSharedValue, useAnimatedScrollHandler } from 'react-native-reanimated';
import Item from './Item';
import usePresenter from './usePresenter';
import Styles from './index.style';
import isFunction from 'lodash/isFunction';
import { itemHeight } from './constant';
const AnimatedFlatList = Animated.createAnimatedComponent(FlatList);
const {
  width
} = Dimensions.get('window');

function WheelPicker(props) {
  const scrollView = useRef();
  const offset = useSharedValue(0);
  const scrollHandler = useAnimatedScrollHandler(e => {
    offset.value = e.contentOffset.y;
  });
  const {
    items: propItems,
    numberOfVisibleRows = 5,
    value,
    onChange = () => {},
    valueAttribute = 'value',
    labelAttribute = 'name'
  } = props;
  const {
    items,
    defaultIndex,
    height,
    currentIndex,
    onValueChange
  } = usePresenter({
    initialValue: value,
    items: propItems,
    valueAttribute,
    labelAttribute,
    numberOfVisibleRows
  });
  const renderItem = useCallback(_ref => {
    let {
      item,
      index
    } = _ref;
    return /*#__PURE__*/React.createElement(Item, {
      index: index,
      offset: offset,
      itemHeight: itemHeight,
      label: item.label
    });
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  []);
  useEffect(() => {
    if (currentIndex !== defaultIndex) onChange(currentIndex); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [currentIndex]);
  const snapToOffsets = useMemo(() => Array(items.length).fill(0).map((_, index) => index * 46), [items]);
  const separators = useMemo(() => {
    return /*#__PURE__*/React.createElement(View // eslint-disable-next-line react-native/no-inline-styles
    , {
      style: {
        position: 'absolute',
        justifyContent: 'center',
        width,
        height
      },
      pointerEvents: "none"
    }, /*#__PURE__*/React.createElement(View, {
      style: Styles.separators
    }));
  }, [height]);
  const contentContainerStyle = useMemo(() => ({
    width,
    alignItems: 'center',
    paddingVertical: height / 2 - itemHeight / 2
  }), [height]);

  const onMomentumScrollEndAndroid = index => {
    if (Platform.OS === 'android' && currentIndex !== index) {}
  };

  useEffect(() => {
    setTimeout(() => {
      // console.log(defaultIndex);
      onMomentumScrollEndAndroid(defaultIndex);
      scrollToOffset(defaultIndex, true);
    }, 100); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [defaultIndex]);

  const scrollToOffset = (index, animated) => {
    var _scrollView$current;

    if (isFunction((_scrollView$current = scrollView.current) === null || _scrollView$current === void 0 ? void 0 : _scrollView$current.scrollToOffset)) {
      var _scrollView$current2;

      (_scrollView$current2 = scrollView.current) === null || _scrollView$current2 === void 0 ? void 0 : _scrollView$current2.scrollToOffset({
        offset: index * itemHeight,
        animated
      });
    } else {
      var _scrollView$current3, _scrollView$current3$;

      (_scrollView$current3 = scrollView.current) === null || _scrollView$current3 === void 0 ? void 0 : (_scrollView$current3$ = _scrollView$current3.getNode()) === null || _scrollView$current3$ === void 0 ? void 0 : _scrollView$current3$.scrollToOffset({
        offset: index * itemHeight,
        animated
      });
    }
  };

  return /*#__PURE__*/React.createElement(View, {
    style: {
      height
    }
  }, /*#__PURE__*/React.createElement(AnimatedFlatList // @ts-ignore
  , {
    ref: scrollView,
    height: height,
    data: items,
    showsVerticalScrollIndicator: false,
    scrollEventThrottle: 100,
    initialNumToRender: numberOfVisibleRows,
    onScroll: scrollHandler,
    pagingEnabled: true,
    renderItem: renderItem,
    snapToOffsets: snapToOffsets,
    keyExtractor: (_, index) => `Item_${index}`,
    contentContainerStyle: contentContainerStyle,
    snapToInterval: itemHeight,
    decelerationRate: 0.99,
    onMomentumScrollEnd: onValueChange
  }), separators);
}

export default /*#__PURE__*/React.memo(WheelPicker);
//# sourceMappingURL=WheelPicker.js.map