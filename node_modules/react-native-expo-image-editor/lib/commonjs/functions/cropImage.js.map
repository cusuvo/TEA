{"version":3,"sources":["cropImage.ts"],"names":["makeCrop","uri","bounds","saveOptions","height","width","ImageManipulator","manipulateAsync","crop","base64","cropImage","bounding","Promise","resolve","uriCroped","croppedWidth","croppedHeight","originX","originY","actualSize"],"mappings":";;;;;;;AAEA;;;;;;AAFA;AAKA,eAAeA,QAAf,CACEC,GADF,EAEEC,MAFF,EAGEC,WAHF,EAIyC;AACvC,MAAID,MAAM,CAACE,MAAP,GAAgB,CAAhB,IAAqBF,MAAM,CAACG,KAAP,GAAe,CAAxC,EAA2C;AACzC,WAAO,MAAMC,gBAAgB,CAACC,eAAjB,CACXN,GADW,EAEX,CACE;AACEO,MAAAA,IAAI,EAAEN;AADR,KADF,CAFW,EAOXC,WAPW,CAAb;AASD;;AACD,SAAO;AACLF,IAAAA,GAAG,EAAE,EADA;AAELQ,IAAAA,MAAM,EAAE,EAFH;AAGLJ,IAAAA,KAAK,EAAE,CAHF;AAILD,IAAAA,MAAM,EAAE;AAJH,GAAP;AAMD;;AAQD;AACA;AACA;AACA;AACA;AAEe,SAASM,SAAT,CACbT,GADa,EAEbU,QAFa,EAGbR,WAHa,EAIc;AAC3B,SAAO,IAAIS,OAAJ,CAAY,MAAOC,OAAP,IAAmB;AACpC,UAAM;AACJZ,MAAAA,GAAG,EAAEa,SADD;AAEJL,MAAAA,MAFI;AAGJJ,MAAAA,KAAK,EAAEU,YAHH;AAIJX,MAAAA,MAAM,EAAEY;AAJJ,QAKF,MAAMhB,QAAQ,CAChBC,GADgB,EAEhB;AACEgB,MAAAA,OAAO,EAAEN,QAAQ,CAACM,OADpB;AAEEC,MAAAA,OAAO,EAAEP,QAAQ,CAACO,OAFpB;AAGEb,MAAAA,KAAK,EAAEM,QAAQ,CAACN,KAHlB;AAIED,MAAAA,MAAM,EAAEO,QAAQ,CAACP;AAJnB,KAFgB,EAQhBD,WARgB,CALlB;AAeAU,IAAAA,OAAO,CAAC;AACNM,MAAAA,UAAU,EAAE;AACVd,QAAAA,KAAK,EAAEU,YADG;AAEVX,QAAAA,MAAM,EAAEY;AAFE,OADN;AAKNf,MAAAA,GAAG,EAAEa,SALC;AAMNL,MAAAA;AANM,KAAD,CAAP;AAQD,GAxBM,CAAP;AAyBD","sourcesContent":["// cropImage.ts\n\nimport * as ImageManipulator from 'expo-image-manipulator';\nimport type { Size, BoundSize } from '../types/cropImage';\n\nasync function makeCrop(\n  uri: string,\n  bounds: BoundSize,\n  saveOptions: ImageManipulator.SaveOptions\n): Promise<ImageManipulator.ImageResult> {\n  if (bounds.height > 0 && bounds.width > 0) {\n    return await ImageManipulator.manipulateAsync(\n      uri,\n      [\n        {\n          crop: bounds,\n        },\n      ],\n      saveOptions\n    );\n  }\n  return {\n    uri: '',\n    base64: '',\n    width: 0,\n    height: 0,\n  };\n}\n\ntype CroppedImageType = {\n  actualSize: Size;\n  uri: string;\n  base64: string | undefined;\n};\n\n// const options = {\n//   compress: 1,\n//   format: ImageManipulator.SaveFormat.PNG,\n//   base64: false,\n// };\n\nexport default function cropImage(\n  uri: string,\n  bounding: any,\n  saveOptions: ImageManipulator.SaveOptions\n): Promise<CroppedImageType> {\n  return new Promise(async (resolve) => {\n    const {\n      uri: uriCroped,\n      base64,\n      width: croppedWidth,\n      height: croppedHeight,\n    } = await makeCrop(\n      uri,\n      {\n        originX: bounding.originX,\n        originY: bounding.originY,\n        width: bounding.width,\n        height: bounding.height,\n      },\n      saveOptions\n    );\n    resolve({\n      actualSize: {\n        width: croppedWidth,\n        height: croppedHeight,\n      },\n      uri: uriCroped,\n      base64,\n    });\n  });\n}\n"]}