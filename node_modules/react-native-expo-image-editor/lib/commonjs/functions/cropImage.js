"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = cropImage;

var ImageManipulator = _interopRequireWildcard(require("expo-image-manipulator"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// cropImage.ts
async function makeCrop(uri, bounds, saveOptions) {
  if (bounds.height > 0 && bounds.width > 0) {
    return await ImageManipulator.manipulateAsync(uri, [{
      crop: bounds
    }], saveOptions);
  }

  return {
    uri: '',
    base64: '',
    width: 0,
    height: 0
  };
}

// const options = {
//   compress: 1,
//   format: ImageManipulator.SaveFormat.PNG,
//   base64: false,
// };
function cropImage(uri, bounding, saveOptions) {
  return new Promise(async resolve => {
    const {
      uri: uriCroped,
      base64,
      width: croppedWidth,
      height: croppedHeight
    } = await makeCrop(uri, {
      originX: bounding.originX,
      originY: bounding.originY,
      width: bounding.width,
      height: bounding.height
    }, saveOptions);
    resolve({
      actualSize: {
        width: croppedWidth,
        height: croppedHeight
      },
      uri: uriCroped,
      base64
    });
  });
}
//# sourceMappingURL=cropImage.js.map