{"version":3,"sources":["ImageEditor.tsx"],"names":["styles","StyleSheet","create","container","backgroundColor","flex","previewArea","modHeader","flexDirection","height","width","Dimensions","get","ImageEditor","props","source","onBack","onDone","saveOptions","uri","setUri","imageSize","setImageSize","handleUpdate","croppedImage","layout","handleDone","compressImage","imageUri","imageWidth","imageHeight","resize"],"mappings":";;;;;;;AACA;;AACA;;AAMA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAZA;AAcA,MAAMA,MAAM,GAAGC,wBAAWC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,eAAe,EAAE,MADR;AAETC,IAAAA,IAAI,EAAE;AAFG,GADoB;AAK/BC,EAAAA,WAAW,EAAE;AACXF,IAAAA,eAAe,EAAE,iBADN;AAEXC,IAAAA,IAAI,EAAE;AAFK,GALkB;AAS/BE,EAAAA,SAAS,EAAE;AACTC,IAAAA,aAAa,EAAE,KADN;AAETH,IAAAA,IAAI,EAAE,CAFG;AAGTI,IAAAA,MAAM,EAAE;AAHC;AAToB,CAAlB,CAAf;;AAuBA,MAAM;AAAEC,EAAAA,KAAF;AAASD,EAAAA;AAAT,IAAoBE,wBAAWC,GAAX,CAAe,QAAf,CAA1B;;AAEe,SAASC,WAAT,CACbC,KADa,EAEA;AACb,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,MAAV;AAAkBC,IAAAA,MAAlB;AAA0BC,IAAAA;AAA1B,MAA0CJ,KAAhD;AACA,QAAM,CAACK,GAAD,EAAMC,MAAN,IAAgB,qBAASL,MAAM,CAACI,GAAhB,CAAtB;AACA,QAAM,CAACE,SAAD,EAAYC,YAAZ,IAA4B,qBAAS;AAAEZ,IAAAA,KAAK,EAAE,CAAT;AAAYD,IAAAA,MAAM,EAAE;AAApB,GAAT,CAAlC;;AAEA,QAAMc,YAAY,GAAIC,YAAD,IAAuB;AAC1CJ,IAAAA,MAAM,CAACI,YAAY,CAACL,GAAd,CAAN;AACD,GAFD;;AAIA,wBAAU,MAAM;AACd,KAAC,YAAY;AACX,YAAMM,MAAM,GAAG,MAAM,2BAAeN,GAAf,EAAoBT,KAApB,EAA2BD,MAAM,GAAG,GAApC,CAArB;AACAa,MAAAA,YAAY,CAACG,MAAD,CAAZ;AACD,KAHD;AAID,GALD,EAKG,CAACN,GAAD,CALH;;AAOA,QAAMO,UAAU,GAAG,YAAY;AAC7BT,IAAAA,MAAM,CAAC,MAAMU,aAAa,CAACR,GAAD,CAApB,CAAN;AACD,GAFD;;AAIA,QAAMQ,aAAa,GAAG,MAAOC,QAAP,IAA4B;AAChD,UAAM;AAAElB,MAAAA,KAAK,EAAEmB,UAAT;AAAqBpB,MAAAA,MAAM,EAAEqB;AAA7B,QAA6C,MAAM,yBACvDF,QADuD,CAAzD;AAGA,WAAO,2CACLA,QADK,EAEL,CAAC;AAAEG,MAAAA,MAAM,EAAE;AAAErB,QAAAA,KAAK,EAAEmB,UAAT;AAAqBpB,QAAAA,MAAM,EAAEqB;AAA7B;AAAV,KAAD,CAFK,EAGLZ,WAHK,CAAP;AAKD,GATD;;AAWA,sBACE,6BAAC,kBAAD;AAAU,IAAA,GAAG,EAAEC;AAAf,kBACE,6BAAC,yBAAD;AAAc,IAAA,KAAK,EAAEnB,MAAM,CAACG;AAA5B,kBACE,6BAAC,mBAAD;AAAY,IAAA,MAAM,EAAEa,MAApB;AAA4B,IAAA,MAAM,EAAEU;AAApC,kBACE,6BAAC,4BAAD;AACE,IAAA,MAAM,EAAE;AAAEP,MAAAA;AAAF,KADV;AAEE,IAAA,KAAK,EAAE;AACLT,MAAAA,KAAK,EAAEW,SAAS,CAACX,KADZ;AAELD,MAAAA,MAAM,EAAEY,SAAS,CAACZ;AAFb;AAFT,IADF,CADF,eAUE,6BAAC,oBAAD;AAAa,IAAA,GAAG,EAAEU,GAAlB;AAAuB,IAAA,QAAQ,EAAEI;AAAjC,IAVF,CADF,CADF;AAgBD","sourcesContent":["// src/component/ImageEditor.tsx\nimport React, { useEffect, useState } from 'react';\nimport {\n  StyleSheet,\n  SafeAreaView,\n  ImageBackground,\n  Dimensions,\n} from 'react-native';\nimport { SaveOptions, manipulateAsync } from 'expo-image-manipulator';\nimport Controller from './Controller';\nimport Manipulator from './Manipulator';\nimport { Provider } from './Provider';\nimport { getImageLayout, getImageSize } from './utils';\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#000',\n    flex: 1,\n  },\n  previewArea: {\n    backgroundColor: 'rgb(22, 22, 22)',\n    flex: 1,\n  },\n  modHeader: {\n    flexDirection: 'row',\n    flex: 1,\n    height: 120,\n  },\n});\n\ninterface ICropperContainerProps {\n  source: { uri: string };\n  onBack: () => void;\n  onDone: (newImage: any) => void;\n  saveOptions: SaveOptions;\n}\n\nconst { width, height } = Dimensions.get('window');\n\nexport default function ImageEditor(\n  props: ICropperContainerProps\n): JSX.Element {\n  const { source, onBack, onDone, saveOptions } = props;\n  const [uri, setUri] = useState(source.uri);\n  const [imageSize, setImageSize] = useState({ width: 0, height: 0 });\n\n  const handleUpdate = (croppedImage: any) => {\n    setUri(croppedImage.uri);\n  };\n\n  useEffect(() => {\n    (async () => {\n      const layout = await getImageLayout(uri, width, height - 240);\n      setImageSize(layout);\n    })();\n  }, [uri]);\n\n  const handleDone = async () => {\n    onDone(await compressImage(uri));\n  };\n\n  const compressImage = async (imageUri: string) => {\n    const { width: imageWidth, height: imageHeight } = await getImageSize(\n      imageUri\n    );\n    return manipulateAsync(\n      imageUri,\n      [{ resize: { width: imageWidth, height: imageHeight } }],\n      saveOptions\n    );\n  };\n\n  return (\n    <Provider uri={uri}>\n      <SafeAreaView style={styles.container}>\n        <Controller onBack={onBack} onDone={handleDone}>\n          <ImageBackground\n            source={{ uri }}\n            style={{\n              width: imageSize.width,\n              height: imageSize.height,\n            }}\n          />\n        </Controller>\n        <Manipulator uri={uri} onUpdate={handleUpdate} />\n      </SafeAreaView>\n    </Provider>\n  );\n}\n"]}