{"version":3,"sources":["Manipulator.tsx"],"names":["width","height","Dimensions","get","AnimatedImageBackground","Animated","createAnimatedComponent","ImageBackground","options","compress","format","SaveFormat","JPEG","base64","Manipulator","props","uri","onUpdate","imageUri","setImageUri","cropperRef","imageSize","setImageSize","originXY","setOriginXY","x","y","manipulator","visible","setVisible","resized","resetCropper","handleDone","current","croppedImage","getCroppedData","handleRotate","rotatedResult","handleReset","reset","onLayout","event","layoutWidth","layoutHeight","nativeEvent","layout","styles","fadeView","container","header","content","footer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport {\n  SafeAreaView,\n  Animated,\n  Dimensions,\n  View,\n  ImageBackground,\n  LayoutChangeEvent,\n} from 'react-native';\nimport { SaveFormat } from 'expo-image-manipulator';\nimport FadeView from './FadeView';\nimport Label from './Label';\nimport { useProvider } from './Provider';\nimport Row from './Row';\nimport { getImageLayout } from './utils';\nimport Cropper from './Cropper';\nimport styles from '../styles/Manipulator.style';\nimport cropImage from '../functions/cropImage';\nimport rotateImage from '../functions/rotateImage';\n\nconst { width, height } = Dimensions.get('window');\n\nconst AnimatedImageBackground =\n  Animated.createAnimatedComponent(ImageBackground);\n\ninterface IManipulatorProps {\n  uri: string;\n  onUpdate: (newImage: any) => void;\n}\n\nconst options = {\n  compress: 1,\n  format: SaveFormat.JPEG,\n  base64: false,\n};\n\nexport default function Manipulator(props: IManipulatorProps) {\n  const { uri, onUpdate } = props;\n  const [imageUri, setImageUri] = useState(uri);\n  const cropperRef = useRef(null);\n  const [imageSize, setImageSize] = useState({ width: 0, height: 0 });\n  const [originXY, setOriginXY] = useState({ x: 0, y: 0 });\n  const {\n    // saveOptions,\n    manipulator: { visible, setVisible },\n  } = useProvider();\n\n  // shouldSetNewImageSize\n  useEffect(() => {\n    (async () => {\n      const resized = await getImageLayout(imageUri, width, height - 240);\n      setImageSize(resized);\n      resetCropper();\n    })();\n  }, [imageUri]);\n\n  const handleDone = async () => {\n    if (cropperRef && cropperRef.current) {\n      const croppedImage = await cropImage(\n        imageUri,\n        await (cropperRef.current as any).getCroppedData(imageUri),\n        options\n      );\n      onUpdate(croppedImage);\n      setImageUri(croppedImage.uri);\n      setVisible(false);\n    }\n  };\n\n  const handleRotate = async () => {\n    const rotatedResult = await rotateImage(imageUri, options);\n    setImageUri(rotatedResult.uri);\n  };\n\n  const handleReset = () => {\n    resetCropper();\n  };\n\n  const resetCropper = () => {\n    if (cropperRef && cropperRef.current) (cropperRef.current as any).reset();\n  };\n\n  const onLayout = (event: LayoutChangeEvent) => {\n    const { width: layoutWidth, height: layoutHeight } =\n      event.nativeEvent.layout;\n    const x = (width - layoutWidth) / 2;\n    const y = (height - layoutHeight) / 2;\n    setOriginXY({ x, y });\n  };\n\n  return (\n    <FadeView visible={visible} style={styles.fadeView}>\n      <SafeAreaView style={styles.container}>\n        <Row style={styles.header}>\n          <Label onPress={handleReset}>重設</Label>\n          <Label onPress={handleDone}>完成</Label>\n        </Row>\n        <View style={styles.content}>\n          {imageSize.width && imageSize.height ? (\n            <Cropper\n              ref={cropperRef}\n              imageWidth={imageSize.width}\n              imageHeight={imageSize.height}\n              originX={originXY.x}\n              originY={originXY.y}\n            >\n              <AnimatedImageBackground\n                onLayout={onLayout}\n                source={{ uri: imageUri }}\n                style={[\n                  {\n                    width: imageSize.width,\n                    height: imageSize.height,\n                  },\n                ]}\n              />\n            </Cropper>\n          ) : null}\n        </View>\n\n        <Row style={styles.footer}>\n          <Label onPress={handleRotate}>旋轉</Label>\n        </Row>\n      </SafeAreaView>\n    </FadeView>\n  );\n}\n"]}