"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = withPanResponder;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// interface WrapperComponentProps {
//   onMove?: (state: any) => void;
// }

/**
 *
 * @deprecated The method should not be used
 * @export
 * @param {*} WrapperComponent
 * @return {*}
 */
function withPanResponder(WrapperComponent) {
  return () => {
    // const { onMove } = props;
    const pan = (0, _react.useRef)(new _reactNative.Animated.ValueXY()).current;
    const panResponder = (0, _react.useRef)(_reactNative.PanResponder.create({
      onMoveShouldSetPanResponder: () => true,
      onPanResponderGrant: () => {
        pan.setOffset({
          x: pan.x._value,
          y: pan.y._value
        });
      },
      onPanResponderMove: _reactNative.Animated.event([null, {
        dx: pan.x,
        dy: pan.y
      }], {
        useNativeDriver: false // listener: (
        //   _: GestureResponderEvent,
        //   gestureState: PanResponderGestureState
        // ) => {
        //   /* my own logic */
        //   // console.log(event)
        //   if (onMove) onMove(gestureState);
        // },

      }),
      onPanResponderRelease: () => {
        pan.flattenOffset();
      }
    })).current;
    return /*#__PURE__*/_react.default.createElement(WrapperComponent, {
      panResponder: panResponder,
      pan: pan
    });
  };
}
//# sourceMappingURL=withPanResponder.js.map