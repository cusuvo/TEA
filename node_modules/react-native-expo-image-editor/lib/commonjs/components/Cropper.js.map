{"version":3,"sources":["Cropper.tsx"],"names":["Direction","Cropper","React","Component","constructor","props","state","direction","NONE","initialWidth","imageWidth","initialHeight","imageHeight","initialLeft","initialTop","gridRef","createRef","pan","Animated","ValueXY","x","y","boxWidth","Value","boxHeight","onPanResponderGrant","bind","onPanResponderMove","onPanResponderEnd","panResponder","PanResponder","create","onMoveShouldSetPanResponder","onPanResponderTerminationRequest","onPanResponderTerminate","onPanResponderRelease","reset","setValue","setOffset","setState","_value","flattenOffset","event","gestureState","dx","ndx","dy","ndy","originX","dw","dh","LEFT","RIGHT","TOP","BOTTOM","TOP_LEFT","TOP_RIGHT","BOTTOM_LEFT","BOTTOM_RIGHT","useNativeDriver","_","moveX","moveY","console","log","current","measure","_fx","_fy","width","height","px","py","xPan","Math","floor","yPan","getDirection","getCroppedData","uri","actualWidth","actualHeight","scaleX","scaleY","originY","xPos","yPos","index","NORMAL","render","children","getGirdAnimatedStyle","zIndex","left","transform","translateX","add","translateY","styles","container","panHandlers"],"mappings":"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","sourcesContent":["// Cropper.tsx\nimport React, { ReactElement, JSXElementConstructor, createRef } from 'react';\nimport {\n  View,\n  Animated,\n  PanResponder,\n  PanResponderInstance,\n  PanResponderGestureState,\n  GestureResponderEvent,\n} from 'react-native';\nimport styles from '../styles/Cropper.style';\nimport Grid from './Grid/Grid';\nimport { getImageSize } from './utils';\n\nenum Direction {\n  NONE,\n  NORMAL,\n  LEFT,\n  RIGHT,\n  TOP,\n  BOTTOM,\n  TOP_LEFT,\n  TOP_RIGHT,\n  BOTTOM_LEFT,\n  BOTTOM_RIGHT,\n}\n\ninterface ICropperProps {\n  imageWidth: number;\n  imageHeight: number;\n  originX: number;\n  originY: number;\n  children: ReactElement<any, string | JSXElementConstructor<any>>;\n}\n\ninterface ICropperState {\n  direction: Direction;\n  initialWidth: number;\n  initialHeight: number;\n  initialLeft: number;\n  initialTop: number;\n}\n\nclass Cropper extends React.Component<ICropperProps, ICropperState> {\n  private panResponder: PanResponderInstance;\n  private gridRef = createRef<any>();\n  private pan: Animated.ValueXY;\n  private boxWidth: Animated.Value;\n  private boxHeight: Animated.Value;\n  constructor(props: ICropperProps) {\n    super(props);\n    // Initial State\n    this.state = {\n      direction: Direction.NONE,\n      initialWidth: props.imageWidth,\n      initialHeight: props.imageHeight,\n      initialLeft: 0,\n      initialTop: 0,\n    };\n    // ==============================\n    // Ref for grid component\n    this.gridRef = React.createRef();\n    // ==========================\n    // Initial Pan\n    this.pan = new Animated.ValueXY({ x: 0, y: 0 });\n    // ==========================\n    // === Box Animated Width & Height ===\n    this.boxWidth = new Animated.Value(props.imageWidth);\n    this.boxHeight = new Animated.Value(props.imageHeight);\n    // ==========================\n    // === Initialize pan responder ===\n    this.onPanResponderGrant = this.onPanResponderGrant.bind(this);\n    this.onPanResponderMove = this.onPanResponderMove.bind(this);\n    this.onPanResponderEnd = this.onPanResponderEnd.bind(this);\n    // this.getCroppedData = this.getCroppedData.bind(this);\n    this.panResponder = PanResponder.create({\n      onMoveShouldSetPanResponder: () => true,\n      onPanResponderTerminationRequest: () => true,\n      onPanResponderGrant: this.onPanResponderGrant,\n      onPanResponderMove: this.onPanResponderMove,\n      onPanResponderTerminate: this.onPanResponderEnd,\n      onPanResponderRelease: this.onPanResponderEnd,\n    });\n    //  ==========================\n  }\n\n  /**\n   *\n   * Reset the cropper to initial state\n   * @memberof Cropper\n   */\n  public reset() {\n    const { imageWidth, imageHeight } = this.props;\n    this.boxWidth.setValue(imageWidth);\n    this.boxHeight.setValue(imageHeight);\n\n    this.pan.setOffset({ x: 0, y: 0 });\n    this.setState({\n      initialTop: 0,\n      initialLeft: 0,\n      initialWidth: imageWidth,\n      initialHeight: imageHeight,\n    });\n  }\n\n  private onPanResponderEnd() {\n    const { initialTop, initialLeft } = this.state;\n\n    this.setState({\n      initialWidth: (this.boxWidth as any)._value,\n      initialHeight: (this.boxHeight as any)._value,\n      initialTop: initialTop + (this.pan.y as any)._value,\n      initialLeft: initialLeft + (this.pan.x as any)._value,\n    });\n    this.pan.flattenOffset();\n    this.pan.setValue({ x: 0, y: 0 });\n  }\n\n  private onPanResponderMove(\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ) {\n    const { dx: ndx, dy: ndy } = gestureState;\n    const { direction, initialLeft, initialTop, initialWidth, initialHeight } =\n      this.state;\n    const { originX } = this.props;\n    let dx = 0;\n    let dy = 0;\n    let dw = 0;\n    let dh = 0;\n\n    switch (direction) {\n      case Direction.LEFT:\n        dx = ndx;\n        dy = 0;\n        dw = initialWidth - dx;\n        dh = initialHeight;\n        break;\n      case Direction.RIGHT:\n        dx = 0;\n        dy = 0;\n        dw = initialWidth + ndx;\n        dh = initialHeight;\n        break;\n      case Direction.TOP:\n        dx = 0;\n        dy = ndy;\n        dw = initialWidth;\n        dh = initialHeight - ndy;\n        break;\n      case Direction.BOTTOM:\n        dx = 0;\n        dy = 0;\n        dw = initialWidth;\n        dh = initialHeight + ndy;\n        break;\n      case Direction.TOP_LEFT:\n        dx = ndx;\n        dy = ndy;\n        dw = initialWidth - ndx;\n        dh = initialHeight - ndy;\n        break;\n      case Direction.TOP_RIGHT:\n        dx = 0;\n        dy = ndy;\n        dw = initialWidth + ndx;\n        dh = initialHeight - ndy;\n        break;\n      case Direction.BOTTOM_LEFT:\n        dx = ndx;\n        dy = 0;\n        dw = initialWidth - ndx;\n        dh = initialHeight + ndy;\n        break;\n      case Direction.BOTTOM_RIGHT:\n        dx = 0;\n        dy = 0;\n        dw = initialWidth + ndx;\n        dh = initialHeight + ndy;\n        break;\n      default:\n        if (ndx + initialLeft + initialWidth >= this.props.imageWidth)\n          dx = this.props.imageWidth - initialLeft - initialWidth;\n        else dx = ndx;\n        if (ndy + initialTop + initialHeight >= this.props.imageHeight)\n          dy = this.props.imageHeight - (initialTop + initialHeight);\n        else dy = ndy;\n\n        dw = initialWidth;\n        dh = initialHeight;\n    }\n\n    if (initialLeft + dx <= originX) dx = -initialLeft;\n\n    if (initialTop + dy <= 0) dy = -initialTop;\n\n    if (dw + initialLeft >= this.props.imageWidth)\n      dw = this.props.imageWidth - initialLeft;\n\n    if (dh + initialTop > this.props.imageHeight)\n      dh = this.props.imageHeight - initialTop;\n\n    return Animated.event(\n      [\n        null,\n        {\n          dx: this.pan.x,\n          dy: this.pan.y,\n          dw: this.boxWidth,\n          dh: this.boxHeight,\n        },\n      ],\n      {\n        useNativeDriver: false,\n      }\n    )(event, { dx, dy, dw, dh });\n  }\n\n  private onPanResponderGrant(\n    _: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ) {\n    const { moveX, moveY } = gestureState;\n    console.log('giant');\n    this.gridRef.current.measure(\n      (\n        _fx: number,\n        _fy: number,\n        width: number,\n        height: number,\n        px: number,\n        py: number\n      ) => {\n        const xPan = Math.floor((moveX - px) / (width / 3));\n        const yPan = Math.floor((moveY - py) / (height / 3));\n\n        this.setState({ direction: this.getDirection(xPan, yPan) });\n      }\n    );\n\n    this.pan.setOffset({\n      x: (this.pan.x as any)._value,\n      y: (this.pan.y as any)._value,\n    });\n  }\n\n  public async getCroppedData(uri: string): Promise<{\n    originX: number;\n    originY: number;\n    width: number;\n    height: number;\n  }> {\n    const { initialTop, initialWidth, initialHeight, initialLeft } = this.state;\n\n    const { imageWidth, imageHeight } = this.props;\n    const { width: actualWidth, height: actualHeight } = await getImageSize(\n      uri\n    );\n    const scaleX = actualWidth / imageWidth;\n    const scaleY = actualHeight / imageHeight;\n\n    return {\n      originX: initialLeft * scaleX,\n      originY: initialTop * scaleY,\n      width: initialWidth * scaleX,\n      height: initialHeight * scaleY,\n    };\n  }\n\n  private getDirection(xPos: number, yPos: number) {\n    const index = Math.floor(yPos * 3 + xPos);\n    switch (index) {\n      case 0:\n        return Direction.TOP_LEFT;\n      case 1:\n        return Direction.TOP;\n      case 2:\n        return Direction.TOP_RIGHT;\n      case 3:\n        return Direction.LEFT;\n      case 4:\n        return Direction.NORMAL;\n      case 5:\n        return Direction.RIGHT;\n      case 6:\n        return Direction.BOTTOM_LEFT;\n      case 7:\n        return Direction.BOTTOM;\n      case 8:\n        return Direction.BOTTOM_RIGHT;\n      default:\n        return Direction.NORMAL;\n    }\n  }\n\n  render() {\n    const { children, imageHeight, imageWidth, originX } = this.props;\n    const getGirdAnimatedStyle = () => {\n      return {\n        width: this.boxWidth,\n        height: this.boxHeight,\n        zIndex: 100,\n        left: originX,\n        transform: [\n          {\n            translateX: Animated.add(this.pan.x, this.state.initialLeft),\n          },\n          { translateY: Animated.add(this.pan.y, this.state.initialTop) },\n        ],\n      };\n    };\n\n    return [\n      children,\n      <View\n        key={'Grid'}\n        style={[\n          {\n            width: imageWidth,\n            height: imageHeight,\n          },\n          styles.container,\n        ]}\n      >\n        <Animated.View\n          ref={this.gridRef}\n          style={getGirdAnimatedStyle()}\n          {...this.panResponder?.panHandlers}\n        >\n          <Grid />\n        </Animated.View>\n      </View>,\n    ];\n  }\n}\n\nexport default Cropper;\n"]}