{"version":3,"sources":["rotateImage.ts"],"names":["Image","ImageManipulator","rotate","uri","saveOptions","manipulateAsync","rotateImage","Promise","resolve","reject","getSize","width","height","newUri","base64","size","errors"],"mappings":"AAAA;AACA,SAASA,KAAT,QAAsB,cAAtB;AACA,OAAO,KAAKC,gBAAZ,MAAkC,wBAAlC;;AAWA,eAAeC,MAAf,CACEC,GADF,EAEE;AACA;AACAC,WAJF,EAKyC;AACvC,SAAOH,gBAAgB,CAACI,eAAjB,CACLF,GADK,EAEL,CACE;AACED,IAAAA,MAAM,EAAE,CAAC;AADX,GADF,CAFK,EAOLE,WAPK,CAAP;AASD;;AAED,eAAe,SAASE,WAAT,CACbH,GADa,EAEbC,WAFa,EAGU;AACvB,SAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCT,IAAAA,KAAK,CAACU,OAAN,CACEP,GADF,EAEE,OAAOQ,KAAP,EAAcC,MAAd,KAAyB;AACvB,YAAM;AAAET,QAAAA,GAAG,EAAEU,MAAP;AAAeC,QAAAA;AAAf,UAA0B,MAAMZ,MAAM,CAC1CC,GAD0C,EAE1C;AACA;AACAC,MAAAA,WAJ0C,CAA5C;AAMAI,MAAAA,OAAO,CAAC;AACNO,QAAAA,IAAI,EAAE;AACJJ,UAAAA,KAAK,EAAEC,MADH;AAEJA,UAAAA,MAAM,EAAED;AAFJ,SADA;AAKNR,QAAAA,GAAG,EAAEU,MALC;AAMNC,QAAAA;AANM,OAAD,CAAP;AAQD,KAjBH,EAkBGE,MAAD,IAAYP,MAAM,CAACO,MAAD,CAlBpB;AAoBD,GArBM,CAAP;AAsBD","sourcesContent":["// rotateImage.ts\nimport { Image } from 'react-native';\nimport * as ImageManipulator from 'expo-image-manipulator';\n\ntype rotatedImage = {\n  uri: string;\n  base64: string | undefined;\n  size: {\n    width: number;\n    height: number;\n  };\n};\n\nasync function rotate(\n  uri: string,\n  // width: number,\n  // height: number,\n  saveOptions: ImageManipulator.SaveOptions\n): Promise<ImageManipulator.ImageResult> {\n  return ImageManipulator.manipulateAsync(\n    uri,\n    [\n      {\n        rotate: -90,\n      },\n    ],\n    saveOptions\n  );\n}\n\nexport default function rotateImage(\n  uri: string,\n  saveOptions: ImageManipulator.SaveOptions\n): Promise<rotatedImage> {\n  return new Promise((resolve, reject) => {\n    Image.getSize(\n      uri,\n      async (width, height) => {\n        const { uri: newUri, base64 } = await rotate(\n          uri,\n          // width,\n          // height,\n          saveOptions\n        );\n        resolve({\n          size: {\n            width: height,\n            height: width,\n          },\n          uri: newUri,\n          base64,\n        });\n      },\n      (errors) => reject(errors)\n    );\n  });\n}\n"]}