function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

// GridLine/GridLine.tsx
import React from 'react';
import { Animated, View } from 'react-native';
import withPanResponder from './withPanResponder';

/**
 *
 *
 * @export
 * @param {Function} getAnimatedStyle
 * @param {*} style
 * @return {*}
 */
export default function GridLine(getAnimatedStyle, style) {
  return withPanResponder(props => {
    const {
      pan,
      panResponder
    } = props;
    return /*#__PURE__*/React.createElement(Animated.View, _extends({
      style: getAnimatedStyle(pan)
    }, panResponder.panHandlers), /*#__PURE__*/React.createElement(View, {
      style: style
    }));
  });
}
//# sourceMappingURL=GridLine.js.map