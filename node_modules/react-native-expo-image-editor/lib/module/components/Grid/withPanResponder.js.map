{"version":3,"sources":["withPanResponder.tsx"],"names":["React","useRef","Animated","PanResponder","withPanResponder","WrapperComponent","pan","ValueXY","current","panResponder","create","onMoveShouldSetPanResponder","onPanResponderGrant","setOffset","x","_value","y","onPanResponderMove","event","dx","dy","useNativeDriver","onPanResponderRelease","flattenOffset"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SACEC,QADF,EAEEC,YAFF,CAGE;AACA;AAJF,OAKO,cALP,C,CAOA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,gBAAT,CAA0BC,gBAA1B,EAAiD;AAC9D,SAAO,MAAM;AACX;AACA,UAAMC,GAAG,GAAGL,MAAM,CAAC,IAAIC,QAAQ,CAACK,OAAb,EAAD,CAAN,CAA+BC,OAA3C;AACA,UAAMC,YAAY,GAAGR,MAAM,CACzBE,YAAY,CAACO,MAAb,CAAoB;AAClBC,MAAAA,2BAA2B,EAAE,MAAM,IADjB;AAElBC,MAAAA,mBAAmB,EAAE,MAAM;AACzBN,QAAAA,GAAG,CAACO,SAAJ,CAAc;AACZC,UAAAA,CAAC,EAAGR,GAAG,CAACQ,CAAL,CAAeC,MADN;AAEZC,UAAAA,CAAC,EAAGV,GAAG,CAACU,CAAL,CAAeD;AAFN,SAAd;AAID,OAPiB;AAQlBE,MAAAA,kBAAkB,EAAEf,QAAQ,CAACgB,KAAT,CAAe,CAAC,IAAD,EAAO;AAAEC,QAAAA,EAAE,EAAEb,GAAG,CAACQ,CAAV;AAAaM,QAAAA,EAAE,EAAEd,GAAG,CAACU;AAArB,OAAP,CAAf,EAAiD;AACnEK,QAAAA,eAAe,EAAE,KADkD,CAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AATmE,OAAjD,CARF;AAmBlBC,MAAAA,qBAAqB,EAAE,MAAM;AAC3BhB,QAAAA,GAAG,CAACiB,aAAJ;AACD;AArBiB,KAApB,CADyB,CAAN,CAwBnBf,OAxBF;AA0BA,wBAAO,oBAAC,gBAAD;AAAkB,MAAA,YAAY,EAAEC,YAAhC;AAA8C,MAAA,GAAG,EAAEH;AAAnD,MAAP;AACD,GA9BD;AA+BD","sourcesContent":["import React, { useRef } from 'react';\nimport {\n  Animated,\n  PanResponder,\n  // GestureResponderEvent,\n  // PanResponderGestureState,\n} from 'react-native';\n\n// interface WrapperComponentProps {\n//   onMove?: (state: any) => void;\n// }\n\n/**\n *\n * @deprecated The method should not be used\n * @export\n * @param {*} WrapperComponent\n * @return {*}\n */\nexport default function withPanResponder(WrapperComponent: any) {\n  return () => {\n    // const { onMove } = props;\n    const pan = useRef(new Animated.ValueXY()).current;\n    const panResponder = useRef(\n      PanResponder.create({\n        onMoveShouldSetPanResponder: () => true,\n        onPanResponderGrant: () => {\n          pan.setOffset({\n            x: (pan.x as any)._value,\n            y: (pan.y as any)._value,\n          });\n        },\n        onPanResponderMove: Animated.event([null, { dx: pan.x, dy: pan.y }], {\n          useNativeDriver: false,\n          // listener: (\n          //   _: GestureResponderEvent,\n          //   gestureState: PanResponderGestureState\n          // ) => {\n          //   /* my own logic */\n          //   // console.log(event)\n          //   if (onMove) onMove(gestureState);\n          // },\n        }),\n        onPanResponderRelease: () => {\n          pan.flattenOffset();\n        },\n      })\n    ).current;\n\n    return <WrapperComponent panResponder={panResponder} pan={pan} />;\n  };\n}\n"]}