{"version":3,"sources":["utils.ts"],"names":["Image","Dimensions","width","height","get","resizeImage","imageWidth","imageHeight","screenWidth","screenHeight","ratio","Math","min","getImageSize","uri","Promise","resolve","reject","getSize","actualWidth","actualHeight","error","getImageLayout","previewWidth","previewHeight","layout","resize"],"mappings":"AAAA;AAEA,SAASA,KAAT,EAAgBC,UAAhB,QAAkC,cAAlC;AAEA,OAAO,MAAM;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,IAAoBF,UAAU,CAACG,GAAX,CAAe,QAAf,CAA1B;AAEP,OAAO,SAASC,WAAT,CACLC,UADK,EAELC,WAFK,EAGLC,WAHK,EAILC,YAJK,EAK8B;AACnC,QAAMC,KAAK,GAAGC,IAAI,CAACC,GAAL,CAASJ,WAAW,GAAGF,UAAvB,EAAmCG,YAAY,GAAGF,WAAlD,CAAd;AAEA,SAAO;AACLL,IAAAA,KAAK,EAAEI,UAAU,GAAGI,KADf;AAELP,IAAAA,MAAM,EAAEI,WAAW,GAAGG;AAFjB,GAAP;AAID;AAED,OAAO,SAASG,YAAT,CACLC,GADK,EAEuC;AAC5C,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCjB,IAAAA,KAAK,CAACkB,OAAN,CACEJ,GADF,EAEE,CAACK,WAAD,EAAsBC,YAAtB,KACEJ,OAAO,CAAC;AACNd,MAAAA,KAAK,EAAEiB,WADD;AAENhB,MAAAA,MAAM,EAAEiB;AAFF,KAAD,CAHX,EAOGC,KAAD,IAAWJ,MAAM,CAACI,KAAD,CAPnB;AASD,GAVM,CAAP;AAWD;AAED,OAAO,eAAeC,cAAf,CACLR,GADK,EAELS,YAFK,EAGLC,aAHK,EAIuC;AAC5C,QAAMC,MAAM,GAAG,MAAMZ,YAAY,CAACC,GAAD,CAAjC;AACA,QAAMY,MAAM,GAAGrB,WAAW,CACxBoB,MAAM,CAACvB,KADiB,EAExBuB,MAAM,CAACtB,MAFiB,EAGxBoB,YAHwB,EAIxBC,aAJwB,CAA1B;AAMA,SAAOE,MAAP;AACD","sourcesContent":["// src/components/utils.ts\n\nimport { Image, Dimensions } from 'react-native';\n\nexport const { width, height } = Dimensions.get('window');\n\nexport function resizeImage(\n  imageWidth: number,\n  imageHeight: number,\n  screenWidth: number,\n  screenHeight: number\n): { width: number; height: number } {\n  const ratio = Math.min(screenWidth / imageWidth, screenHeight / imageHeight);\n\n  return {\n    width: imageWidth * ratio,\n    height: imageHeight * ratio,\n  };\n}\n\nexport function getImageSize(\n  uri: string\n): Promise<{ width: number; height: number }> {\n  return new Promise((resolve, reject) => {\n    Image.getSize(\n      uri,\n      (actualWidth: number, actualHeight: number) =>\n        resolve({\n          width: actualWidth,\n          height: actualHeight,\n        }),\n      (error) => reject(error)\n    );\n  });\n}\n\nexport async function getImageLayout(\n  uri: string,\n  previewWidth: number,\n  previewHeight: number\n): Promise<{ width: number; height: number }> {\n  const layout = await getImageSize(uri);\n  const resize = resizeImage(\n    layout.width,\n    layout.height,\n    previewWidth,\n    previewHeight\n  );\n  return resize;\n}\n"]}