{"version":3,"sources":["Cropper.tsx"],"names":["React","createRef","View","Animated","PanResponder","styles","Grid","getImageSize","Direction","Cropper","Component","constructor","props","state","direction","NONE","initialWidth","imageWidth","initialHeight","imageHeight","initialLeft","initialTop","gridRef","pan","ValueXY","x","y","boxWidth","Value","boxHeight","onPanResponderGrant","bind","onPanResponderMove","onPanResponderEnd","panResponder","create","onMoveShouldSetPanResponder","onPanResponderTerminationRequest","onPanResponderTerminate","onPanResponderRelease","reset","setValue","setOffset","setState","_value","flattenOffset","event","gestureState","dx","ndx","dy","ndy","originX","dw","dh","LEFT","RIGHT","TOP","BOTTOM","TOP_LEFT","TOP_RIGHT","BOTTOM_LEFT","BOTTOM_RIGHT","useNativeDriver","_","moveX","moveY","console","log","current","measure","_fx","_fy","width","height","px","py","xPan","Math","floor","yPan","getDirection","getCroppedData","uri","actualWidth","actualHeight","scaleX","scaleY","originY","xPos","yPos","index","NORMAL","render","children","getGirdAnimatedStyle","zIndex","left","transform","translateX","add","translateY","container","panHandlers"],"mappings":"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","sourcesContent":["// Cropper.tsx\nimport React, { ReactElement, JSXElementConstructor, createRef } from 'react';\nimport {\n  View,\n  Animated,\n  PanResponder,\n  PanResponderInstance,\n  PanResponderGestureState,\n  GestureResponderEvent,\n} from 'react-native';\nimport styles from '../styles/Cropper.style';\nimport Grid from './Grid/Grid';\nimport { getImageSize } from './utils';\n\nenum Direction {\n  NONE,\n  NORMAL,\n  LEFT,\n  RIGHT,\n  TOP,\n  BOTTOM,\n  TOP_LEFT,\n  TOP_RIGHT,\n  BOTTOM_LEFT,\n  BOTTOM_RIGHT,\n}\n\ninterface ICropperProps {\n  imageWidth: number;\n  imageHeight: number;\n  originX: number;\n  originY: number;\n  children: ReactElement<any, string | JSXElementConstructor<any>>;\n}\n\ninterface ICropperState {\n  direction: Direction;\n  initialWidth: number;\n  initialHeight: number;\n  initialLeft: number;\n  initialTop: number;\n}\n\nclass Cropper extends React.Component<ICropperProps, ICropperState> {\n  private panResponder: PanResponderInstance;\n  private gridRef = createRef<any>();\n  private pan: Animated.ValueXY;\n  private boxWidth: Animated.Value;\n  private boxHeight: Animated.Value;\n  constructor(props: ICropperProps) {\n    super(props);\n    // Initial State\n    this.state = {\n      direction: Direction.NONE,\n      initialWidth: props.imageWidth,\n      initialHeight: props.imageHeight,\n      initialLeft: 0,\n      initialTop: 0,\n    };\n    // ==============================\n    // Ref for grid component\n    this.gridRef = React.createRef();\n    // ==========================\n    // Initial Pan\n    this.pan = new Animated.ValueXY({ x: 0, y: 0 });\n    // ==========================\n    // === Box Animated Width & Height ===\n    this.boxWidth = new Animated.Value(props.imageWidth);\n    this.boxHeight = new Animated.Value(props.imageHeight);\n    // ==========================\n    // === Initialize pan responder ===\n    this.onPanResponderGrant = this.onPanResponderGrant.bind(this);\n    this.onPanResponderMove = this.onPanResponderMove.bind(this);\n    this.onPanResponderEnd = this.onPanResponderEnd.bind(this);\n    // this.getCroppedData = this.getCroppedData.bind(this);\n    this.panResponder = PanResponder.create({\n      onMoveShouldSetPanResponder: () => true,\n      onPanResponderTerminationRequest: () => true,\n      onPanResponderGrant: this.onPanResponderGrant,\n      onPanResponderMove: this.onPanResponderMove,\n      onPanResponderTerminate: this.onPanResponderEnd,\n      onPanResponderRelease: this.onPanResponderEnd,\n    });\n    //  ==========================\n  }\n\n  /**\n   *\n   * Reset the cropper to initial state\n   * @memberof Cropper\n   */\n  public reset() {\n    const { imageWidth, imageHeight } = this.props;\n    this.boxWidth.setValue(imageWidth);\n    this.boxHeight.setValue(imageHeight);\n\n    this.pan.setOffset({ x: 0, y: 0 });\n    this.setState({\n      initialTop: 0,\n      initialLeft: 0,\n      initialWidth: imageWidth,\n      initialHeight: imageHeight,\n    });\n  }\n\n  private onPanResponderEnd() {\n    const { initialTop, initialLeft } = this.state;\n\n    this.setState({\n      initialWidth: (this.boxWidth as any)._value,\n      initialHeight: (this.boxHeight as any)._value,\n      initialTop: initialTop + (this.pan.y as any)._value,\n      initialLeft: initialLeft + (this.pan.x as any)._value,\n    });\n    this.pan.flattenOffset();\n    this.pan.setValue({ x: 0, y: 0 });\n  }\n\n  private onPanResponderMove(\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ) {\n    const { dx: ndx, dy: ndy } = gestureState;\n    const { direction, initialLeft, initialTop, initialWidth, initialHeight } =\n      this.state;\n    const { originX } = this.props;\n    let dx = 0;\n    let dy = 0;\n    let dw = 0;\n    let dh = 0;\n\n    switch (direction) {\n      case Direction.LEFT:\n        dx = ndx;\n        dy = 0;\n        dw = initialWidth - dx;\n        dh = initialHeight;\n        break;\n      case Direction.RIGHT:\n        dx = 0;\n        dy = 0;\n        dw = initialWidth + ndx;\n        dh = initialHeight;\n        break;\n      case Direction.TOP:\n        dx = 0;\n        dy = ndy;\n        dw = initialWidth;\n        dh = initialHeight - ndy;\n        break;\n      case Direction.BOTTOM:\n        dx = 0;\n        dy = 0;\n        dw = initialWidth;\n        dh = initialHeight + ndy;\n        break;\n      case Direction.TOP_LEFT:\n        dx = ndx;\n        dy = ndy;\n        dw = initialWidth - ndx;\n        dh = initialHeight - ndy;\n        break;\n      case Direction.TOP_RIGHT:\n        dx = 0;\n        dy = ndy;\n        dw = initialWidth + ndx;\n        dh = initialHeight - ndy;\n        break;\n      case Direction.BOTTOM_LEFT:\n        dx = ndx;\n        dy = 0;\n        dw = initialWidth - ndx;\n        dh = initialHeight + ndy;\n        break;\n      case Direction.BOTTOM_RIGHT:\n        dx = 0;\n        dy = 0;\n        dw = initialWidth + ndx;\n        dh = initialHeight + ndy;\n        break;\n      default:\n        if (ndx + initialLeft + initialWidth >= this.props.imageWidth)\n          dx = this.props.imageWidth - initialLeft - initialWidth;\n        else dx = ndx;\n        if (ndy + initialTop + initialHeight >= this.props.imageHeight)\n          dy = this.props.imageHeight - (initialTop + initialHeight);\n        else dy = ndy;\n\n        dw = initialWidth;\n        dh = initialHeight;\n    }\n\n    if (initialLeft + dx <= originX) dx = -initialLeft;\n\n    if (initialTop + dy <= 0) dy = -initialTop;\n\n    if (dw + initialLeft >= this.props.imageWidth)\n      dw = this.props.imageWidth - initialLeft;\n\n    if (dh + initialTop > this.props.imageHeight)\n      dh = this.props.imageHeight - initialTop;\n\n    return Animated.event(\n      [\n        null,\n        {\n          dx: this.pan.x,\n          dy: this.pan.y,\n          dw: this.boxWidth,\n          dh: this.boxHeight,\n        },\n      ],\n      {\n        useNativeDriver: false,\n      }\n    )(event, { dx, dy, dw, dh });\n  }\n\n  private onPanResponderGrant(\n    _: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ) {\n    const { moveX, moveY } = gestureState;\n    console.log('giant');\n    this.gridRef.current.measure(\n      (\n        _fx: number,\n        _fy: number,\n        width: number,\n        height: number,\n        px: number,\n        py: number\n      ) => {\n        const xPan = Math.floor((moveX - px) / (width / 3));\n        const yPan = Math.floor((moveY - py) / (height / 3));\n\n        this.setState({ direction: this.getDirection(xPan, yPan) });\n      }\n    );\n\n    this.pan.setOffset({\n      x: (this.pan.x as any)._value,\n      y: (this.pan.y as any)._value,\n    });\n  }\n\n  public async getCroppedData(uri: string): Promise<{\n    originX: number;\n    originY: number;\n    width: number;\n    height: number;\n  }> {\n    const { initialTop, initialWidth, initialHeight, initialLeft } = this.state;\n\n    const { imageWidth, imageHeight } = this.props;\n    const { width: actualWidth, height: actualHeight } = await getImageSize(\n      uri\n    );\n    const scaleX = actualWidth / imageWidth;\n    const scaleY = actualHeight / imageHeight;\n\n    return {\n      originX: initialLeft * scaleX,\n      originY: initialTop * scaleY,\n      width: initialWidth * scaleX,\n      height: initialHeight * scaleY,\n    };\n  }\n\n  private getDirection(xPos: number, yPos: number) {\n    const index = Math.floor(yPos * 3 + xPos);\n    switch (index) {\n      case 0:\n        return Direction.TOP_LEFT;\n      case 1:\n        return Direction.TOP;\n      case 2:\n        return Direction.TOP_RIGHT;\n      case 3:\n        return Direction.LEFT;\n      case 4:\n        return Direction.NORMAL;\n      case 5:\n        return Direction.RIGHT;\n      case 6:\n        return Direction.BOTTOM_LEFT;\n      case 7:\n        return Direction.BOTTOM;\n      case 8:\n        return Direction.BOTTOM_RIGHT;\n      default:\n        return Direction.NORMAL;\n    }\n  }\n\n  render() {\n    const { children, imageHeight, imageWidth, originX } = this.props;\n    const getGirdAnimatedStyle = () => {\n      return {\n        width: this.boxWidth,\n        height: this.boxHeight,\n        zIndex: 100,\n        left: originX,\n        transform: [\n          {\n            translateX: Animated.add(this.pan.x, this.state.initialLeft),\n          },\n          { translateY: Animated.add(this.pan.y, this.state.initialTop) },\n        ],\n      };\n    };\n\n    return [\n      children,\n      <View\n        key={'Grid'}\n        style={[\n          {\n            width: imageWidth,\n            height: imageHeight,\n          },\n          styles.container,\n        ]}\n      >\n        <Animated.View\n          ref={this.gridRef}\n          style={getGirdAnimatedStyle()}\n          {...this.panResponder?.panHandlers}\n        >\n          <Grid />\n        </Animated.View>\n      </View>,\n    ];\n  }\n}\n\nexport default Cropper;\n"]}